// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  AVAILABLE
  UNAVAILABLE
}

enum Role {
  USER
  ADMIN
}

model User {
  id               String         @id @unique @default(cuid())
  google_id        String?
  email            String         @unique
  password         String         @default("-")
  name             String
  phoneNumber      String         @default("-")
  address          String         @default("-")
  city             String         @default("-")
  lga              String         @default("-")
  state            String         @default("-")
  role             Role           @default(USER)
  ads              Ad[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  comments         Comment[]
  replies          Reply[]
  reportedUser     ReportedUser[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  selling          Escrow[]       @relation("Selling")
  buying           Escrow[]       @relation("Buying")
  reportedAd       ReportedAd[]
}

model Ad {
  id          String       @id @unique @default(cuid())
  author      User         @relation(fields: [userId], references: [id])
  title       String
  description String?
  type        String
  price       String
  quantity    String
  address     String       @default("-")
  city        String       @default("-")
  lga         String       @default("-")
  state       String       @default("-")
  status      Status       @default(AVAILABLE)
  active      Boolean      @default(true)
  photos      String[]
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  comments    Comment[]
  reportedAds ReportedAd[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Ad       @relation(fields: [adId], references: [id])
  author    User     @relation(fields: [userId], references: [id])
  adId      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  replies   Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  comment   Comment  @relation(fields: [commentId], references: [id])
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  commentId String
  userId    String
}

model ReportedAd {
  id          String   @id @default(cuid())
  ad          Ad       @relation(fields: [adId], references: [id])
  description String
  reportedBy  User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  adId        String
  userId      String   @default("-")
}

model ReportedUser {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      String
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  senderId   String
  receiverId String
}

model Escrow {
  id        String   @id @default(cuid())
  amount    String
  reference String
  completed Boolean  @default(false)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  seller    User     @relation("Selling", fields: [sellerId], references: [id])
  buyer     User     @relation("Buying", fields: [buyerId], references: [id])
  sellerId  String
  buyerId   String
}
